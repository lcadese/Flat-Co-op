{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "sg61odlapqhwb"
  },
  "info": {
    "title": "FlatHub",
    "version": "1.0",
    "summary": "API for our flat organization app",
    "description": "API for our flat organization app",
    "contact": {
      "name": "Liam",
      "email": "cadli971@student.otago.ac.nz"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/payments": {
      "post": {
        "summary": "Create a new payment",
        "operationId": "createPayment",
        "tags": [
          "Payment"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          },
          "description": ""
        },
        "responses": {
          "201": {
            "description": "Payment created successfully"
          },
          "400": {
            "description": "Invalid input, object invalid"
          }
        }
      },
      "get": {
        "summary": "Get all payments",
        "operationId": "get-payments",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment",
                    "x-stoplight": {
                      "id": "bm6gwza8xgcbj"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get all payments ",
        "tags": [
          "Payment"
        ]
      }
    },
    "/payments/{paymentID}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "paymentID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get payment by task and user ID",
        "tags": [
          "Payment"
        ],
        "responses": {
          "200": {
            "description": "Payment data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "operationId": "get-payments-paymentID",
        "description": "Payment data retrieved successfully"
      },
      "put": {
        "summary": "",
        "operationId": "put-payments-paymentID",
        "responses": {
          "200": {
            "description": "Payment status updated successfully"
          },
          "404": {
            "description": "Payment not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "description": "",
        "tags": [
          "Payment"
        ]
      }
    },
    "/assigned/task/{taskID}": {
      "get": {
        "summary": "Get Assignments for a Task",
        "operationId": "getAssignmentsForTask",
        "tags": [
          "Assigned"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assignments for the task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assigned"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assigned/user/{userID}": {
      "get": {
        "summary": "Get Assignments for a User",
        "operationId": "getAssignmentsForUser",
        "tags": [
          "Assigned"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assignments for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assigned"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assigned": {
      "post": {
        "summary": "Create an Assignment",
        "operationId": "createAssignment",
        "tags": [
          "Assigned"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "taskID": {
                    "type": "string",
                    "description": "ID of the task to assign"
                  },
                  "userID": {
                    "type": "string",
                    "description": "ID of the user to be assigned to the task"
                  }
                },
                "required": [
                  "taskID",
                  "userID"
                ]
              }
            }
          },
          "description": ""
        },
        "responses": {
          "201": {
            "description": "Assignment created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/assigned/{taskID}/{userID}": {
      "delete": {
        "summary": "Delete an Assignment",
        "operationId": "deleteAssignment",
        "tags": [
          "Assigned"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assignment deleted successfully"
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "summary": "Sign Up",
        "operationId": "user-signup",
        "responses": {
          "201": {
            "description": "User is successfully created"
          },
          "409": {
            "description": "That username already exists"
          }
        },
        "description": "User is able to create an account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/user/login": {
      "post": {
        "summary": "Login",
        "operationId": "user-login",
        "responses": {
          "200": {
            "description": "User login is correct"
          },
          "401": {
            "description": "Invalid username or password"
          }
        },
        "description": "User is able to login from their account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/user/{userID}": {
      "get": {
        "summary": "Get User",
        "operationId": "get-user",
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "User"
        ]
      },
      "delete": {
        "summary": "Delete User",
        "operationId": "delete-user",
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "Cannot delete because that userID is not found "
          }
        },
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "Set Flat for User",
        "operationId": "put-user-userID",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "userID",
          "in": "path",
          "required": true
        }
      ]
    },
    "/flat/{flatId}": {
      "get": {
        "summary": "Get Flat by ID",
        "operationId": "get-flat",
        "responses": {
          "200": {
            "description": "Flat found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flat"
                }
              }
            }
          },
          "404": {
            "description": "Flat not found"
          }
        },
        "parameters": [
          {
            "name": "flatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Flat"
        ]
      },
      "delete": {
        "summary": "Delete Flat",
        "operationId": "delete-flat",
        "responses": {
          "204": {
            "description": "Flat deleted successfully"
          },
          "404": {
            "description": "Flat not found"
          }
        },
        "parameters": [
          {
            "name": "flatId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Flat"
        ]
      }
    },
    "/flat/create": {
      "post": {
        "summary": "Create a new flat",
        "operationId": "create-flat",
        "responses": {
          "201": {
            "description": "Flat is successfully created"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Flat"
              }
            }
          }
        },
        "tags": [
          "Flat"
        ],
        "description": ""
      },
      "parameters": []
    },
    "paths": null,
    "/tasks": {
      "post": {
        "summary": "Create a new task",
        "operationId": "create-task",
        "tags": [
          "Task"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "summary": "Get task by ID",
        "operationId": "get-task",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "put": {
        "summary": "Update task",
        "operationId": "update-task",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated"
          },
          "404": {
            "description": "Task not found"
          }
        }
      },
      "delete": {
        "summary": "Delete task",
        "operationId": "delete-task",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Task deleted"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/flatID/{flatID}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "flatID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-flatID-flatID",
        "description": ""
      }
    },
    "/flat/users/{flatID}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "flatID",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Your GET endpoint",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-flat-users-flatID"
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "userID": {
            "type": "string",
            "description": "ID of the user"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user"
          },
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "flatID": {
            "type": "string",
            "description": "References FlatID"
          },
          "password": {
            "type": "string",
            "description": "Password for user"
          }
        },
        "required": [
          "userID",
          "username",
          "firstName",
          "lastName",
          "email",
          "flatID",
          "password"
        ]
      },
      "Flat": {
        "title": "Flat",
        "x-stoplight": {
          "id": "ycqcfje1hu3au"
        },
        "type": "object",
        "x-tags": [
          "User"
        ],
        "properties": {
          "flatID": {
            "type": "string",
            "description": "The id of the flat"
          },
          "address": {
            "type": "string",
            "description": "location of the flat"
          },
          "name": {
            "type": "string",
            "description": "name of the flat"
          },
          "host": {
            "type": "string"
          }
        },
        "required": [
          "flatID",
          "address",
          "name"
        ]
      },
      "Task": {
        "title": "Task",
        "x-stoplight": {
          "id": "vy4lmku8e4aql"
        },
        "type": "object",
        "x-tags": [
          "Task"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "Id for Task"
          },
          "taskName": {
            "type": "string",
            "description": "Name of Task"
          },
          "description": {
            "type": "string",
            "description": "description of task"
          },
          "requestedDate": {
            "type": "string",
            "description": "Date that task needs to be completed"
          },
          "flatID": {
            "description": "reference to flat ",
            "type": "string"
          },
          "completed": {
            "type": "boolean",
            "description": "If the task is complete or not "
          }
        },
        "required": [
          "taskId",
          "taskName",
          "description",
          "requestedDate",
          "flatID",
          "completed"
        ]
      },
      "Assigned": {
        "title": "Assigned",
        "x-stoplight": {
          "id": "pkzjv045fsedu"
        },
        "type": "object",
        "x-tags": [
          "Task"
        ],
        "properties": {
          "taskID": {
            "description": "Reference to task",
            "type": "string"
          },
          "userID": {
            "description": "reference to user",
            "type": "string"
          }
        },
        "required": [
          "taskID",
          "userID"
        ]
      },
      "Payment": {
        "title": "Payment",
        "x-stoplight": {
          "id": "ip0uj5diusxe3"
        },
        "type": "object",
        "x-tags": [
          "Payment"
        ],
        "properties": {
          "paymentID": {
            "description": "references task",
            "type": "string",
            "x-stoplight": {
              "id": "hm05uvl7055r0"
            }
          },
          "userID": {
            "description": "References user",
            "type": "string"
          },
          "amount": {
            "type": "number",
            "description": "Amount the payment is for"
          },
          "payed": {
            "type": "boolean",
            "description": "Whether the payment is complete"
          }
        },
        "required": [
          "amount",
          "payed"
        ],
        "description": ""
      }
    }
  }
}